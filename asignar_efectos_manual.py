#!/usr/bin/env python3
"""
üéØ Asignaci√≥n Manual de Efectos - 12 Segundos
===========================================

Permite asignar efectos espec√≠ficos a im√°genes espec√≠ficas de forma manual.
√ötil cuando quieres control total sobre qu√© efecto aplicar a cada imagen.

Uso:
    python asignar_efectos_manual.py
"""

import sys
from pathlib import Path
from moviepy.editor import ImageClip, concatenate_videoclips

# A√±adir el directorio ra√≠z al path
PROJECT_ROOT = Path(__file__).resolve().parent
if str(PROJECT_ROOT) not in sys.path:
    sys.path.append(str(PROJECT_ROOT))

from utils.efectos import EfectosVideo

def crear_video_con_asignacion_manual():
    """Crea un video con efectos asignados manualmente a cada imagen."""
    
    # Configuraci√≥n
    images_dir = Path("projects/san_blas__625f3d33/images")
    output_dir = Path("test_output")
    output_dir.mkdir(exist_ok=True)
    output_path = output_dir / "video_efectos_manual_12s.mp4"
    
    DURACION_CLIP = 12.0
    
    # Obtener lista de im√°genes
    image_files = sorted([
        f for f in images_dir.iterdir() 
        if f.suffix.lower() in ['.jpg', '.jpeg', '.png', '.webp']
    ])
    
    if not image_files:
        print(f"‚ùå No se encontraron im√°genes en {images_dir}")
        return
    
    # ===== ASIGNACI√ìN MANUAL DE EFECTOS =====
    # Aqu√≠ puedes especificar exactamente qu√© efecto quieres para cada imagen
    # Formato: "nombre_imagen": ("efecto", {par√°metros})
    
    asignaciones_manuales = {
        # Primeras 10 im√°genes con efectos espec√≠ficos
        "scene_000.webp": ("kenburns", {"zoom_start": 1.0, "zoom_end": 1.5, "pan_start": (0.0, 0.0), "pan_end": (0.6, 0.4)}),
        "scene_001.webp": ("zoom_in", {"zoom_factor": 1.4}),
        "scene_002.webp": ("pan_left", {"zoom_factor": 1.3, "distance": 0.4}),
        "scene_003.webp": ("fade_in", {"duration": 3.0}),
        "scene_004.webp": ("shake", {"intensity": 8, "zoom_factor": 1.2}),
        "scene_005.webp": ("zoom_out", {"zoom_factor": 1.6}),
        "scene_006.webp": ("pan_right", {"zoom_factor": 1.3, "distance": 0.4}),
        "scene_007.webp": ("kenburns", {"zoom_start": 1.2, "zoom_end": 1.0, "pan_start": (0.7, 0.3), "pan_end": (0.2, 0.8)}),
        "scene_008.webp": ("pan_up", {"zoom_factor": 1.25}),
        "scene_009.webp": ("mirror_x", {}),
        "scene_010.webp": ("zoom_in", {"zoom_factor": 1.5}),
        "scene_011.webp": ("pan_down", {"zoom_factor": 1.25}),
        "scene_012.webp": ("kenburns", {"zoom_start": 1.0, "zoom_end": 1.4, "pan_start": (0.3, 0.7), "pan_end": (0.8, 0.2)}),
        "scene_013.webp": ("shake", {"intensity": 10, "zoom_factor": 1.3}),
        "scene_014.webp": ("zoom_out", {"zoom_factor": 1.7}),
        "scene_015.webp": ("pan_left", {"zoom_factor": 1.4, "distance": 0.5}),
        "scene_016.webp": ("fade_in", {"duration": 4.0}),
        "scene_017.webp": ("mirror_y", {}),
        "scene_018.webp": ("kenburns", {"zoom_start": 1.3, "zoom_end": 1.1, "pan_start": (0.1, 0.9), "pan_end": (0.9, 0.1)}),
        "scene_019.webp": ("pan_right", {"zoom_factor": 1.35, "distance": 0.3}),
        "scene_020.webp": ("zoom_in", {"zoom_factor": 1.6}),
        "scene_021.webp": ("shake_zoom_combo", {"shake_duration": 2.0, "intensity": 8, "zoom_factor_shake": 1.2, "zoom_in_factor": 1.4, "zoom_out_factor": 1.6}),
        "scene_022.webp": ("shake_kenburns_combo", {"shake_duration": 1.5, "intensity": 10, "zoom_factor_shake": 1.15, "kenburns_zoom_start": 1.0, "kenburns_zoom_end": 1.4, "kenburns_pan_start": (0.2, 0.2), "kenburns_pan_end": (0.7, 0.6)}),
        # Contin√∫a con m√°s asignaciones si necesitas...
        # Para las im√°genes no especificadas, se usar√° "zoom_in" como efecto por defecto
    }
    
    # Efecto por defecto para im√°genes no especificadas
    efecto_por_defecto = ("zoom_in", {"zoom_factor": 1.3})
    
    print("üéØ ASIGNACI√ìN MANUAL DE EFECTOS - 12 SEGUNDOS POR IMAGEN")
    print("=" * 60)
    print(f"üìÅ Im√°genes encontradas: {len(image_files)}")
    print(f"üéØ Asignaciones manuales: {len(asignaciones_manuales)}")
    print(f"‚è±Ô∏è Duraci√≥n por clip: {DURACION_CLIP} segundos")
    print(f"‚è±Ô∏è Duraci√≥n total estimada: {len(image_files) * DURACION_CLIP:.1f} segundos")
    print(f"üíæ Guardando en: {output_path}")
    print("")
    
    clips_procesados = []
    resumen_efectos = {}
    
    for i, image_file in enumerate(image_files):
        # Obtener la asignaci√≥n para esta imagen
        if image_file.name in asignaciones_manuales:
            efecto_nombre, efecto_params = asignaciones_manuales[image_file.name]
            asignacion_tipo = "üìå Manual"
        else:
            efecto_nombre, efecto_params = efecto_por_defecto
            asignacion_tipo = "üîÑ Por defecto"
        
        # Contar efectos para el resumen
        if efecto_nombre not in resumen_efectos:
            resumen_efectos[efecto_nombre] = 0
        resumen_efectos[efecto_nombre] += 1
        
        print(f"üì∏ Imagen {i+1:2d}/{len(image_files)}: {image_file.name}")
        print(f"   ‚ú® Efecto: {efecto_nombre}")
        print(f"   {asignacion_tipo}")
        print(f"   ‚è±Ô∏è Duraci√≥n: {DURACION_CLIP}s")
        
        try:
            # Crear clip base de 12 segundos
            clip = ImageClip(str(image_file)).set_duration(DURACION_CLIP).set_fps(24)
            
            # Aplicar el efecto asignado
            clip_con_efecto = EfectosVideo.apply_effect(clip, efecto_nombre, **efecto_params)
            
            clips_procesados.append(clip_con_efecto)
            print(f"   ‚úÖ Procesado exitosamente")
            
        except Exception as e:
            print(f"   ‚ùå Error aplicando efecto: {e}")
            # Usar clip sin efecto como fallback
            clip_sin_efecto = ImageClip(str(image_file)).set_duration(DURACION_CLIP).set_fps(24)
            clips_procesados.append(clip_sin_efecto)
            print(f"   ‚ö†Ô∏è Usando clip sin efecto como fallback")
        
        print("")
    
    if not clips_procesados:
        print("‚ùå No se pudo procesar ning√∫n clip")
        return
    
    print("üîó Concatenando todos los clips...")
    print(f"üìä Total de clips a concatenar: {len(clips_procesados)}")
    
    try:
        # Concatenar todos los clips
        video_final = concatenate_videoclips(clips_procesados, method="compose")
        
        print("üíæ Renderizando video final...")
        print("‚è≥ Esto puede tardar varios minutos...")
        
        # Guardar el video
        video_final.write_videofile(
            str(output_path),
            fps=24,
            codec='libx264',
            audio_codec='aac',
            temp_audiofile='temp-audio.m4a',
            remove_temp=True,
            verbose=False,
            logger=None
        )
        
        # Limpiar memoria
        for clip in clips_procesados:
            clip.close()
        video_final.close()
        
        print("")
        print("üéâ ¬°VIDEO CON ASIGNACI√ìN MANUAL CREADO!")
        print("=" * 50)
        print(f"üìÅ Archivo: {output_path}")
        print(f"‚è±Ô∏è Duraci√≥n final: {len(image_files) * DURACION_CLIP:.1f} segundos")
        print(f"üìä Im√°genes procesadas: {len(image_files)}")
        print(f"‚ú® Efectos aplicados: {len(clips_procesados)}")
        print(f"üìè Resoluci√≥n: 1920x1080 @ 24fps")
        print("")
        
        # Mostrar resumen de efectos utilizados
        print("üìã RESUMEN DE EFECTOS UTILIZADOS:")
        print("-" * 40)
        for efecto, cantidad in sorted(resumen_efectos.items()):
            print(f"  ‚Ä¢ {efecto}: {cantidad} imagen(es)")
        
        print("")
        print("üí° C√ìMO PERSONALIZAR ESTE SCRIPT:")
        print("   1. Edita el diccionario 'asignaciones_manuales' en el c√≥digo")
        print("   2. Especifica qu√© efecto quieres para cada imagen")
        print("   3. Ajusta los par√°metros de cada efecto seg√∫n tus necesidades")
        print("   4. Las im√°genes no especificadas usar√°n el efecto por defecto")
        
    except Exception as e:
        print(f"‚ùå Error creando video final: {e}")
        return

def mostrar_efectos_disponibles():
    """Muestra todos los efectos disponibles con sus par√°metros."""
    
    efectos_info = {
        "kenburns": {
            "descripcion": "Zoom y paneo combinado (efecto Ken Burns)",
            "parametros": "zoom_start, zoom_end, pan_start, pan_end"
        },
        "zoom_in": {
            "descripcion": "Zoom hacia adelante progresivo", 
            "parametros": "zoom_factor"
        },
        "zoom_out": {
            "descripcion": "Zoom hacia atr√°s progresivo",
            "parametros": "zoom_factor"
        },
        "pan_left": {
            "descripcion": "Movimiento de c√°mara hacia la izquierda",
            "parametros": "zoom_factor, distance"
        },
        "pan_right": {
            "descripcion": "Movimiento de c√°mara hacia la derecha", 
            "parametros": "zoom_factor, distance"
        },
        "pan_up": {
            "descripcion": "Movimiento de c√°mara hacia arriba",
            "parametros": "zoom_factor"
        },
        "pan_down": {
            "descripcion": "Movimiento de c√°mara hacia abajo",
            "parametros": "zoom_factor"
        },
        "shake": {
            "descripcion": "Efecto de temblor/vibraci√≥n",
            "parametros": "intensity, zoom_factor"
        },
        "shake_zoom_combo": {
            "descripcion": "Temblor inicial + zoom in/out combinado",
            "parametros": "shake_duration, intensity, zoom_factor_shake, zoom_in_factor, zoom_out_factor"
        },
        "shake_kenburns_combo": {
            "descripcion": "Temblor inicial + efecto Ken Burns elegante",
            "parametros": "shake_duration, intensity, zoom_factor_shake, kenburns_zoom_start, kenburns_zoom_end, kenburns_pan_start, kenburns_pan_end"
        },
        "fade_in": {
            "descripcion": "Aparici√≥n gradual desde negro",
            "parametros": "duration"
        },
        "fade_out": {
            "descripcion": "Desvanecimiento gradual a negro",
            "parametros": "duration"
        },
        "mirror_x": {
            "descripcion": "Espejo horizontal",
            "parametros": "ninguno"
        },
        "mirror_y": {
            "descripcion": "Espejo vertical", 
            "parametros": "ninguno"
        },
        "rotate_180": {
            "descripcion": "Rotaci√≥n 180 grados",
            "parametros": "ninguno"
        }
    }
    
    print("‚ú® EFECTOS DISPONIBLES")
    print("=" * 50)
    for i, (efecto, info) in enumerate(efectos_info.items(), 1):
        print(f"{i:2d}. {efecto}")
        print(f"    üìù {info['descripcion']}")
        print(f"    ‚öôÔ∏è Par√°metros: {info['parametros']}")
        print("")

def main():
    """Funci√≥n principal."""
    print("üéØ ASIGNACI√ìN MANUAL DE EFECTOS")
    print("=" * 40)
    print("1. Ver efectos disponibles")
    print("2. Crear video con asignaci√≥n manual")
    print("")
    
    opcion = input("Selecciona una opci√≥n (1/2) [2]: ").strip()
    
    if opcion == "1":
        mostrar_efectos_disponibles()
    else:
        crear_video_con_asignacion_manual()

if __name__ == "__main__":
    main() 